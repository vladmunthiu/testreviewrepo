# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
- stage: build
  displayName: 'Build'
  jobs:
  - job: build
    pool:
      name: Hosted Windows 2019 with VS2019
      demands: azureps

    steps:
      - task: DotNetCoreCLI@2
        displayName: 'Build'
        inputs:
          command: 'build'
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Tests'
        inputs:
          command: test
          projects: 'SampleApplication\SampleApplication.Tests\SampleApplication.Tests.csproj'
          arguments: '-â€“configuration $(BuildConfiguration) /p:CollectCoverage=true \/p:CoverletOputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\'
      - task: AzurePowerShell@3
        displayName: 'Validate ARM template'
        inputs:
          azureSubscription: 'pipelineconnectionname'
          ScriptPath: 'SampleApplication/SampleApplication.ResourceGroup/Deploy-AzureResourceGroup.ps1'
          ScriptArguments: -ResourceGroupName 'vladtestpipeline' -ResourceGroupLocation 'centralus' -StorageAccountName '' -TemplateFile 'azuredeploy.json' -TemplateParametersFile 'devenvdeploy.parameters.json' -ArtifactStagingDirectory '.' -DSCSourceFolder '.\DSC' -ValidateOnly
          azurePowerShellVersion: LatestVersion
      - task: DotNetCoreCLI@2
        displayName: 'Package'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '**/*.csproj'
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifact: drop'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish ARM: drop'
        inputs:
          PathtoPublish: 'SampleApplication/SampleApplication.ResourceGroup/'
          ArtifactName: 'drop'
          publishLocation: 'Container'
#      - task: DotNetCoreCLI@2
#        displayName: 'Package'
#        inputs:
#          command: publish
#          publishWebProjects: True
#          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#          zipAfterPublish: True
#- stage : package
#  displayName: 'Package'
#  dependsOn: build
#  condition: succeeded()